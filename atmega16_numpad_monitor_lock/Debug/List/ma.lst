
AVRASM ver. 2.1.30  C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm Thu Mar 13 21:50:20 2025

C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1089): warning: Register r6 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1091): warning: Register r8 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1093): warning: Register r10 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1096): warning: Register r13 already defined by the .DEF directive
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1097): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _position=R5
                 	.DEF _sh_i=R6
                 	.DEF _sh_i_msb=R7
                 	.DEF _bt_i=R8
                 	.DEF _bt_i_msb=R9
                 	.DEF _i=R10
                 	.DEF _i_msb=R11
                 	.DEF _j=R12
                 	.DEF _j_msb=R13
                 	.DEF _try=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 006d 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00002a 0002      	.DW  0x0002
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
00002b 0000
00002c 0000      	.DB  0x0,0x0,0x0,0x0
00002d 0000
00002e 0000      	.DB  0x0,0x0,0x0,0x0
00002f 0000      	.DB  0x0,0x0
                 
                 _0x3:
000030 60fc
000031 f2da
000032 b666
000033 e0be      	.DB  0xFC,0x60,0xDA,0xF2,0x66,0xB6,0xBE,0xE0
000034 f6fe      	.DB  0xFE,0xF6
                 _0x4:
000035 0201
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1142): warning: .cseg .db misalignment - padding zero byte
000036 0004      	.DB  0x1,0x2,0x4
                 _0x5:
000037 0001
000038 0002
000039 0003
00003a 0004      	.DB  0x1,0x0,0x2,0x0,0x3,0x0,0x4,0x0
00003b 0005
00003c 0006
00003d 0007
00003e 0008      	.DB  0x5,0x0,0x6,0x0,0x7,0x0,0x8,0x0
00003f 0009
000040 000b
000041 0000
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1146): warning: .cseg .db misalignment - padding zero byte
000042 0016      	.DB  0x9,0x0,0xB,0x0,0x0,0x0,0x16
                 _0x6:
000043 000b
000044 000b
000045 000b
000046 000b      	.DB  0xB,0x0,0xB,0x0,0xB,0x0,0xB,0x0
000047 000b
000048 000b
000049 000b
00004a 000b      	.DB  0xB,0x0,0xB,0x0,0xB,0x0,0xB,0x0
00004b 000b
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1150): warning: .cseg .db misalignment - padding zero byte
00004c 000b      	.DB  0xB,0x0,0xB
                 _0x7:
00004d 0004
00004e 0000
00004f 0001
000050 0006      	.DB  0x4,0x0,0x0,0x0,0x1,0x0,0x6,0x0
000051 0002
000052 0001
000053 0003
000054 0001      	.DB  0x2,0x0,0x1,0x0,0x3,0x0,0x1,0x0
000055 0003
C:\Users\Asus\Desktop\atmega16_numpad_monitor\Debug\List\ma.asm(1154): warning: .cseg .db misalignment - padding zero byte
000056 0005      	.DB  0x3,0x0,0x5
                 
                 __GLOBAL_INI_TBL:
000057 0001      	.DW  0x01
000058 0002      	.DW  0x02
000059 0054      	.DW  __REG_BIT_VARS*2
                 
00005a 000a      	.DW  0x0A
00005b 0004      	.DW  0x04
00005c 0056      	.DW  __REG_VARS*2
                 
00005d 000a      	.DW  0x0A
00005e 0160      	.DW  _ssd
00005f 0060      	.DW  _0x3*2
                 
000060 0003      	.DW  0x03
000061 016a      	.DW  _cpositions
000062 006a      	.DW  _0x4*2
                 
000063 0017      	.DW  0x17
000064 016d      	.DW  _rcposition
000065 006e      	.DW  _0x5*2
                 
000066 0013      	.DW  0x13
000067 0189      	.DW  _number
000068 0086      	.DW  _0x6*2
                 
000069 0013      	.DW  0x13
00006a 019d      	.DW  _password
00006b 009a      	.DW  _0x7*2
                 
                 _0xFFFFFFFF:
00006c 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00006d 94f8      	CLI
00006e 27ee      	CLR  R30
00006f bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000070 e0f1      	LDI  R31,1
000071 bffb      	OUT  GICR,R31
000072 bfeb      	OUT  GICR,R30
000073 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000074 e08d      	LDI  R24,(14-2)+1
000075 e0a2      	LDI  R26,2
000076 27bb      	CLR  R27
                 __CLEAR_REG:
000077 93ed      	ST   X+,R30
000078 958a      	DEC  R24
000079 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00007a e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00007b e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00007c e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00007d 93ed      	ST   X+,R30
00007e 9701      	SBIW R24,1
00007f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000080 eaee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000081 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000082 9185      	LPM  R24,Z+
000083 9195      	LPM  R25,Z+
000084 9700      	SBIW R24,0
000085 f061      	BREQ __GLOBAL_INI_END
000086 91a5      	LPM  R26,Z+
000087 91b5      	LPM  R27,Z+
000088 9005      	LPM  R0,Z+
000089 9015      	LPM  R1,Z+
00008a 01bf      	MOVW R22,R30
00008b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00008c 9005      	LPM  R0,Z+
00008d 920d      	ST   X+,R0
00008e 9701      	SBIW R24,1
00008f f7e1      	BRNE __GLOBAL_INI_LOOP
000090 01fb      	MOVW R30,R22
000091 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000092 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000093 bfed      	OUT  SPL,R30
000094 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000095 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000096 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000097 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000098 940c 009a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;#define r1 PINC.3
                 ;#define r2 PINC.4
                 ;#define r3 PINC.5
                 ;#define r4 PINC.6
                 ;
                 ;
                 ;
                 ;unsigned char ssd[10]={0xfc,0x60,0xda,0xf2,0x66,0xb6,0xbe,0xe0,0xfe,0xf6};
                 
                 	.DSEG
                 ;unsigned char position = 0x00;
                 ;unsigned char cpositions[3] ={0x01,0x02,0x04};
                 ;int rcposition[4][3]={{1,2,3},
                 ;                      {4,5,6},
                 ;                      {7,8,9},
                 ;                      {11,0,22}};
                 ;
                 ;
                 ;
                 ;int sh_i=0;
                 ;int bt_i=0;
                 ;int i=0;
                 ;int j=0;
                 ;int k=0;
                 ;bit ch = 0;
                 ;bit l_check=1;
                 ;int temp;
                 ;int number[10]={11,11,11,11,11,11,11,11,11,11};
                 ;int password[10]={4,0,1,6,2,1,3,1,3,5};
                 ;unsigned char try=0x0;
                 ;
                 ;
                 ;
                 ;   void show();
                 ;   int check();
                 ;void main()
                 ; 0000 0026 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0027 DDRB=0x00;
00009a e0e0      	LDI  R30,LOW(0)
00009b bbe7      	OUT  0x17,R30
                 ; 0000 0028 DDRA=0x00;
00009c bbea      	OUT  0x1A,R30
                 ; 0000 0029 DDRC=0x00;
00009d bbe4      	OUT  0x14,R30
                 ; 0000 002A DDRD=0x00;
00009e bbe1      	OUT  0x11,R30
                 ; 0000 002B 
                 ; 0000 002C 
                 ; 0000 002D delay_ms(10);
00009f d0e7      	RCALL SUBOPT_0x0
                 ; 0000 002E 
                 ; 0000 002F DDRB=0xff;
0000a0 efef      	LDI  R30,LOW(255)
0000a1 bbe7      	OUT  0x17,R30
                 ; 0000 0030 DDRA=0xff;
0000a2 bbea      	OUT  0x1A,R30
                 ; 0000 0031 DDRC=0xff;
0000a3 bbe4      	OUT  0x14,R30
                 ; 0000 0032 DDRD=0xff;
0000a4 bbe1      	OUT  0x11,R30
                 ; 0000 0033 
                 ; 0000 0034 
                 ; 0000 0035 PORTC=0x00;
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bbe5      	OUT  0x15,R30
                 ; 0000 0036 
                 ; 0000 0037 PORTB=0x00;
0000a7 bbe8      	OUT  0x18,R30
                 ; 0000 0038 
                 ; 0000 0039 
                 ; 0000 003A delay_ms(10);
0000a8 d0de      	RCALL SUBOPT_0x0
                 ; 0000 003B 
                 ; 0000 003C     while(1)
                 _0x8:
                 ; 0000 003D     {
                 ; 0000 003E 
                 ; 0000 003F 
                 ; 0000 0040          for(i=0;i<10;i+=1)
0000a9 24aa      	CLR  R10
0000aa 24bb      	CLR  R11
                 _0xC:
0000ab e0ea      	LDI  R30,LOW(10)
0000ac e0f0      	LDI  R31,HIGH(10)
0000ad 16ae      	CP   R10,R30
0000ae 06bf      	CPC  R11,R31
0000af f00c      	BRLT PC+2
0000b0 c081      	RJMP _0xD
                 ; 0000 0041          {
                 ; 0000 0042               temp=check();
0000b1 d09a      	RCALL _check
0000b2 93e0 0187 	STS  _temp,R30
0000b4 93f0 0188 	STS  _temp+1,R31
                 ; 0000 0043               switch (temp)
                 ; 0000 0044               {
                 ; 0000 0045                 case 11:
0000b6 30eb      	CPI  R30,LOW(0xB)
0000b7 e0a0      	LDI  R26,HIGH(0xB)
0000b8 07fa      	CPC  R31,R26
0000b9 f489      	BRNE _0x11
                 ; 0000 0046                     for (j=0;j<10;j+=1){number[j]=11;}
0000ba 24cc      	CLR  R12
0000bb 24dd      	CLR  R13
                 _0x13:
0000bc e0ea      	LDI  R30,LOW(10)
0000bd e0f0      	LDI  R31,HIGH(10)
0000be 16ce      	CP   R12,R30
0000bf 06df      	CPC  R13,R31
0000c0 f434      	BRGE _0x14
0000c1 d0c9      	RCALL SUBOPT_0x1
0000c2 d0d0      	RCALL SUBOPT_0x2
0000c3 01f6      	MOVW R30,R12
0000c4 9631      	ADIW R30,1
0000c5 016f      	MOVW R12,R30
0000c6 cff5      	RJMP _0x13
                 _0x14:
                 ; 0000 0047                     i=-1;
0000c7 efef      	LDI  R30,LOW(65535)
0000c8 efff      	LDI  R31,HIGH(65535)
0000c9 015f      	MOVW R10,R30
                 ; 0000 0048                     show();
0000ca c061      	RJMP _0x3C
                 ; 0000 0049                     break;
                 ; 0000 004A                 case 22:
                 _0x11:
0000cb 31e6      	CPI  R30,LOW(0x16)
0000cc e0a0      	LDI  R26,HIGH(0x16)
0000cd 07fa      	CPC  R31,R26
0000ce f009      	BREQ PC+2
0000cf c04f      	RJMP _0x2D
                 ; 0000 004B                     l_check=1;
0000d0 9468      	SET
0000d1 f821      	BLD  R2,1
                 ; 0000 004C                     for (j=0;j<10;j+=1){
0000d2 24cc      	CLR  R12
0000d3 24dd      	CLR  R13
                 _0x17:
0000d4 e0ea      	LDI  R30,LOW(10)
0000d5 e0f0      	LDI  R31,HIGH(10)
0000d6 16ce      	CP   R12,R30
0000d7 06df      	CPC  R13,R31
0000d8 f58c      	BRGE _0x18
                 ; 0000 004D                         if(number[j]!=password[j])
0000d9 d0b1      	RCALL SUBOPT_0x1
0000da 900d      	LD   R0,X+
0000db 901c      	LD   R1,X
0000dc 01f6      	MOVW R30,R12
0000dd e9ad      	LDI  R26,LOW(_password)
0000de e0b1      	LDI  R27,HIGH(_password)
0000df d0b8      	RCALL SUBOPT_0x3
0000e0 940e 01ca 	CALL __GETW1P
0000e2 15e0      	CP   R30,R0
0000e3 05f1      	CPC  R31,R1
0000e4 f109      	BREQ _0x19
                 ; 0000 004E                         {
                 ; 0000 004F                              try+=1;
0000e5 9443      	INC  R4
                 ; 0000 0050                              l_check=0;
0000e6 94e8      	CLT
0000e7 f821      	BLD  R2,1
                 ; 0000 0051                              if(try==0x5)
0000e8 e0e5      	LDI  R30,LOW(5)
0000e9 15e4      	CP   R30,R4
0000ea f481      	BRNE _0x1A
                 ; 0000 0052                              {
                 ; 0000 0053 
                 ; 0000 0054                                 for(k=0;k<10;k+=1)
0000eb d0b1      	RCALL SUBOPT_0x4
                 _0x1C:
0000ec d0b6      	RCALL SUBOPT_0x5
0000ed f42c      	BRGE _0x1D
                 ; 0000 0055                                 {
                 ; 0000 0056                                     number[k]=11;
0000ee d0ba      	RCALL SUBOPT_0x6
0000ef d0be      	RCALL SUBOPT_0x7
0000f0 d0a2      	RCALL SUBOPT_0x2
                 ; 0000 0057                                 }
0000f1 d0bf      	RCALL SUBOPT_0x8
0000f2 cff9      	RJMP _0x1C
                 _0x1D:
                 ; 0000 0058                                 i=-1;
0000f3 d0c4      	RCALL SUBOPT_0x9
                 ; 0000 0059                                 show();
                 ; 0000 005A                                 while(1)
                 _0x1E:
                 ; 0000 005B                                 {
                 ; 0000 005C                                     PORTD=0x0f;
0000f4 e0ef      	LDI  R30,LOW(15)
0000f5 bbe2      	OUT  0x12,R30
                 ; 0000 005D                                     delay_ms(50);
0000f6 d0c5      	RCALL SUBOPT_0xA
                 ; 0000 005E                                     PORTD=0x00;
0000f7 e0e0      	LDI  R30,LOW(0)
0000f8 bbe2      	OUT  0x12,R30
                 ; 0000 005F                                     delay_ms(50);
0000f9 d0c2      	RCALL SUBOPT_0xA
                 ; 0000 0060                                 }
0000fa cff9      	RJMP _0x1E
                 ; 0000 0061 
                 ; 0000 0062 
                 ; 0000 0063 
                 ; 0000 0064                              }
                 ; 0000 0065                              else{
                 _0x1A:
                 ; 0000 0066                                 PORTD=try;
0000fb ba42      	OUT  0x12,R4
                 ; 0000 0067 
                 ; 0000 0068                                 for(k=0;k<10;k+=1)
0000fc d0a0      	RCALL SUBOPT_0x4
                 _0x23:
0000fd d0a5      	RCALL SUBOPT_0x5
0000fe f42c      	BRGE _0x24
                 ; 0000 0069                                 {
                 ; 0000 006A                                     number[k]=11;
0000ff d0a9      	RCALL SUBOPT_0x6
000100 d0ad      	RCALL SUBOPT_0x7
000101 d091      	RCALL SUBOPT_0x2
                 ; 0000 006B                                 }
000102 d0ae      	RCALL SUBOPT_0x8
000103 cff9      	RJMP _0x23
                 _0x24:
                 ; 0000 006C                                 i=-1;
000104 d0b3      	RCALL SUBOPT_0x9
                 ; 0000 006D                                 show();
                 ; 0000 006E                                 break;
000105 c004      	RJMP _0x18
                 ; 0000 006F                                }
                 ; 0000 0070                         }
                 ; 0000 0071 
                 ; 0000 0072                     }
                 _0x19:
000106 01f6      	MOVW R30,R12
000107 9631      	ADIW R30,1
000108 016f      	MOVW R12,R30
000109 cfca      	RJMP _0x17
                 _0x18:
                 ; 0000 0073                      if(l_check){
00010a fe21      	SBRS R2,1
00010b c012      	RJMP _0x25
                 ; 0000 0074                      while(1)
                 _0x26:
                 ; 0000 0075                             {
                 ; 0000 0076                             PORTD=0x30;
00010c e3e0      	LDI  R30,LOW(48)
00010d bbe2      	OUT  0x12,R30
                 ; 0000 0077                             if(PIND.5==0)
00010e 9985      	SBIC 0x10,5
00010f c00d      	RJMP _0x29
                 ; 0000 0078                             {
                 ; 0000 0079                                 PORTD=0x00;
000110 e0e0      	LDI  R30,LOW(0)
000111 bbe2      	OUT  0x12,R30
                 ; 0000 007A 
                 ; 0000 007B                                 for(k=0;k<10;k+=1)
000112 d08a      	RCALL SUBOPT_0x4
                 _0x2B:
000113 d08f      	RCALL SUBOPT_0x5
000114 f42c      	BRGE _0x2C
                 ; 0000 007C                                 {
                 ; 0000 007D                                     number[k]=11;
000115 d093      	RCALL SUBOPT_0x6
000116 d097      	RCALL SUBOPT_0x7
000117 d07b      	RCALL SUBOPT_0x2
                 ; 0000 007E                                 }
000118 d098      	RCALL SUBOPT_0x8
000119 cff9      	RJMP _0x2B
                 _0x2C:
                 ; 0000 007F                                 i=-1;
00011a d09d      	RCALL SUBOPT_0x9
                 ; 0000 0080                                 show();
                 ; 0000 0081                                 show();
00011b d018      	RCALL _show
                 ; 0000 0082                                 break;
00011c c001      	RJMP _0x28
                 ; 0000 0083                             }
                 ; 0000 0084 
                 ; 0000 0085                             }
                 _0x29:
00011d cfee      	RJMP _0x26
                 _0x28:
                 ; 0000 0086                      }
                 ; 0000 0087                     break;
                 _0x25:
00011e c00e      	RJMP _0x10
                 ; 0000 0088 
                 ; 0000 0089                 default:
                 _0x2D:
                 ; 0000 008A                     number[i]=temp;
00011f 01f5      	MOVW R30,R10
000120 e8a9      	LDI  R26,LOW(_number)
000121 e0b1      	LDI  R27,HIGH(_number)
000122 0fee      	LSL  R30
000123 1fff      	ROL  R31
000124 0fea      	ADD  R30,R26
000125 1ffb      	ADC  R31,R27
000126 91a0 0187 	LDS  R26,_temp
000128 91b0 0188 	LDS  R27,_temp+1
00012a 83a0      	STD  Z+0,R26
00012b 83b1      	STD  Z+1,R27
                 ; 0000 008B                     show();
                 _0x3C:
00012c d007      	RCALL _show
                 ; 0000 008C               }
                 _0x10:
                 ; 0000 008D             delay_ms(50);
00012d d08e      	RCALL SUBOPT_0xA
                 ; 0000 008E          }
00012e 01f5      	MOVW R30,R10
00012f 9631      	ADIW R30,1
000130 015f      	MOVW R10,R30
000131 cf79      	RJMP _0xC
                 _0xD:
                 ; 0000 008F 
                 ; 0000 0090 
                 ; 0000 0091     }
000132 cf76      	RJMP _0x8
                 ; 0000 0092 }
                 _0x2E:
000133 cfff      	RJMP _0x2E
                 ; .FEND
                 ;
                 ;   void show()
                 ; 0000 0095    {
                 _show:
                 ; .FSTART _show
                 ; 0000 0096         position=0x00;
000134 2455      	CLR  R5
                 ; 0000 0097 
                 ; 0000 0098         delay_ms(10);
000135 d051      	RCALL SUBOPT_0x0
                 ; 0000 0099 
                 ; 0000 009A         for(sh_i=0;sh_i<10;sh_i+=1)
000136 2466      	CLR  R6
000137 2477      	CLR  R7
                 _0x30:
000138 e0ea      	LDI  R30,LOW(10)
000139 e0f0      	LDI  R31,HIGH(10)
00013a 166e      	CP   R6,R30
00013b 067f      	CPC  R7,R31
00013c f474      	BRGE _0x31
                 ; 0000 009B         {
                 ; 0000 009C 
                 ; 0000 009D             PORTA=position;
00013d ba5b      	OUT  0x1B,R5
                 ; 0000 009E 
                 ; 0000 009F             PORTB=ssd[number[sh_i]];
00013e 01f3      	MOVW R30,R6
00013f d06e      	RCALL SUBOPT_0x7
000140 940e 01ca 	CALL __GETW1P
000142 5ae0      	SUBI R30,LOW(-_ssd)
000143 4ffe      	SBCI R31,HIGH(-_ssd)
000144 81e0      	LD   R30,Z
000145 bbe8      	OUT  0x18,R30
                 ; 0000 00A0 
                 ; 0000 00A1             position+=1;
000146 9453      	INC  R5
                 ; 0000 00A2 
                 ; 0000 00A3 
                 ; 0000 00A4 
                 ; 0000 00A5         }
000147 01f3      	MOVW R30,R6
000148 9631      	ADIW R30,1
000149 013f      	MOVW R6,R30
00014a cfed      	RJMP _0x30
                 _0x31:
                 ; 0000 00A6 
                 ; 0000 00A7    }
00014b 9508      	RET
                 ; .FEND
                 ;   int check()
                 ; 0000 00A9    {
                 _check:
                 ; .FSTART _check
                 ; 0000 00AA         ch=1;
00014c 9468      	SET
00014d f820      	BLD  R2,0
                 ; 0000 00AB         while(ch)
                 _0x32:
00014e fe20      	SBRS R2,0
00014f c036      	RJMP _0x34
                 ; 0000 00AC         {
                 ; 0000 00AD             for(bt_i=0;bt_i<3;bt_i+=1)
000150 2488      	CLR  R8
000151 2499      	CLR  R9
                 _0x36:
000152 e0e3      	LDI  R30,LOW(3)
000153 e0f0      	LDI  R31,HIGH(3)
000154 168e      	CP   R8,R30
000155 069f      	CPC  R9,R31
000156 f574      	BRGE _0x37
                 ; 0000 00AE             {
                 ; 0000 00AF                   PORTC=cpositions[bt_i];
000157 e6aa      	LDI  R26,LOW(_cpositions)
000158 e0b1      	LDI  R27,HIGH(_cpositions)
000159 0da8      	ADD  R26,R8
00015a 1db9      	ADC  R27,R9
00015b 91ec      	LD   R30,X
00015c bbe5      	OUT  0x15,R30
                 ; 0000 00B0                   if(r1==1){ch=0;return rcposition[0][bt_i];}
00015d 9b9b      	SBIS 0x13,3
00015e c006      	RJMP _0x38
00015f 94e8      	CLT
000160 f820      	BLD  R2,0
000161 01f4      	MOVW R30,R8
000162 e6ad      	LDI  R26,LOW(_rcposition)
000163 e0b1      	LDI  R27,HIGH(_rcposition)
000164 c015      	RJMP _0x2000002
                 ; 0000 00B1                    if(r2==1){ch=0;return rcposition[1][bt_i];}
                 _0x38:
000165 9b9c      	SBIS 0x13,4
000166 c005      	RJMP _0x39
000167 94e8      	CLT
000168 f820      	BLD  R2,0
                +
000169 e7a3     +LDI R26 , LOW ( _rcposition + ( 6 ) )
00016a e0b1     +LDI R27 , HIGH ( _rcposition + ( 6 ) )
                 	__POINTW2MN _rcposition,6
00016b c00d      	RJMP _0x2000001
                 ; 0000 00B2                     if(r3==1){ch=0;return rcposition[2][bt_i];}
                 _0x39:
00016c 9b9d      	SBIS 0x13,5
00016d c005      	RJMP _0x3A
00016e 94e8      	CLT
00016f f820      	BLD  R2,0
                +
000170 e7a9     +LDI R26 , LOW ( _rcposition + ( 12 ) )
000171 e0b1     +LDI R27 , HIGH ( _rcposition + ( 12 ) )
                 	__POINTW2MN _rcposition,12
000172 c006      	RJMP _0x2000001
                 ; 0000 00B3                      if(r4==1){ch=0;return rcposition[3][bt_i];}
                 _0x3A:
000173 9b9e      	SBIS 0x13,6
000174 c00c      	RJMP _0x3B
000175 94e8      	CLT
000176 f820      	BLD  R2,0
                +
000177 e7af     +LDI R26 , LOW ( _rcposition + ( 18 ) )
000178 e0b1     +LDI R27 , HIGH ( _rcposition + ( 18 ) )
                 	__POINTW2MN _rcposition,18
                 _0x2000001:
000179 01f4      	MOVW R30,R8
                 _0x2000002:
00017a 0fee      	LSL  R30
00017b 1fff      	ROL  R31
00017c 0fae      	ADD  R26,R30
00017d 1fbf      	ADC  R27,R31
00017e 940e 01ca 	CALL __GETW1P
000180 9508      	RET
                 ; 0000 00B4                        //delay_ms(100);
                 ; 0000 00B5 
                 ; 0000 00B6             }
                 _0x3B:
000181 01f4      	MOVW R30,R8
000182 9631      	ADIW R30,1
000183 014f      	MOVW R8,R30
000184 cfcd      	RJMP _0x36
                 _0x37:
                 ; 0000 00B7         }
000185 cfc8      	RJMP _0x32
                 _0x34:
                 ; 0000 00B8 
                 ; 0000 00B9    }
000186 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 _ssd:
000160           	.BYTE 0xA
                 _cpositions:
00016a           	.BYTE 0x3
                 _rcposition:
00016d           	.BYTE 0x18
                 _k:
000185           	.BYTE 0x2
                 _temp:
000187           	.BYTE 0x2
                 _number:
000189           	.BYTE 0x14
                 _password:
00019d           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000187 e0aa      	LDI  R26,LOW(10)
000188 e0b0      	LDI  R27,0
000189 940c 01c0 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
00018b 01f6      	MOVW R30,R12
00018c e8a9      	LDI  R26,LOW(_number)
00018d e0b1      	LDI  R27,HIGH(_number)
00018e 0fee      	LSL  R30
00018f 1fff      	ROL  R31
000190 0fae      	ADD  R26,R30
000191 1fbf      	ADC  R27,R31
000192 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000193 e0eb      	LDI  R30,LOW(11)
000194 e0f0      	LDI  R31,HIGH(11)
000195 93ed      	ST   X+,R30
000196 93fc      	ST   X,R31
000197 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
000198 0fee      	LSL  R30
000199 1fff      	ROL  R31
00019a 0fae      	ADD  R26,R30
00019b 1fbf      	ADC  R27,R31
00019c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x4:
00019d e0e0      	LDI  R30,LOW(0)
00019e 93e0 0185 	STS  _k,R30
0001a0 93e0 0186 	STS  _k+1,R30
0001a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0001a3 91a0 0185 	LDS  R26,_k
0001a5 91b0 0186 	LDS  R27,_k+1
0001a7 971a      	SBIW R26,10
0001a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x6:
0001a9 91e0 0185 	LDS  R30,_k
0001ab 91f0 0186 	LDS  R31,_k+1
0001ad 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0001ae e8a9      	LDI  R26,LOW(_number)
0001af e0b1      	LDI  R27,HIGH(_number)
0001b0 cfe7      	RJMP SUBOPT_0x3
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x8:
0001b1 dff7      	RCALL SUBOPT_0x6
0001b2 9631      	ADIW R30,1
0001b3 93e0 0185 	STS  _k,R30
0001b5 93f0 0186 	STS  _k+1,R31
0001b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
0001b8 efef      	LDI  R30,LOW(65535)
0001b9 efff      	LDI  R31,HIGH(65535)
0001ba 015f      	MOVW R10,R30
0001bb cf78      	RJMP _show
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0001bc e3a2      	LDI  R26,LOW(50)
0001bd e0b0      	LDI  R27,0
0001be 940c 01c0 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0001c0 9610      	adiw r26,0
0001c1 f039      	breq __delay_ms1
                 __delay_ms0:
0001c2 95a8      	wdr
                +
0001c3 ed80     +LDI R24 , LOW ( 0x7D0 )
0001c4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001c5 9701     +SBIW R24 , 1
0001c6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001c7 9711      	sbiw r26,1
0001c8 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001c9 9508      	ret
                 
                 __GETW1P:
0001ca 91ed      	LD   R30,X+
0001cb 91fc      	LD   R31,X
0001cc 9711      	SBIW R26,1
0001cd 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :   6 r1 :   3 r2 :   9 r3 :   0 r4 :   3 r5 :   3 r6 :   5 r7 :   2 
r8 :   7 r9 :   3 r10:   7 r11:   2 r12:  10 r13:   4 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  30 r27:  21 r28:   1 r29:   1 r30:  98 r31:  33 
x  :  10 y  :   0 z  :  10 
Registers used: 24 out of 35 (68.6%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :   5 
adiw  :   7 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   7 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   4 
brge  :   7 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :   7 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   3 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   8 cpi   :   2 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   2 jmp   :  24 ld    :   6 ldd   :   0 ldi   :  63 
lds   :   6 lpm   :   7 lsl   :   4 lsr   :   0 mov   :   0 movw  :  21 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  24 pop   :   0 push  :   0 rcall :  36 ret   :  12 
reti  :   0 rjmp  :  32 rol   :   4 ror   :   0 sbc   :   0 sbci  :   1 
sbi   :   0 sbic  :   1 sbis  :   4 sbiw  :   7 sbr   :   0 sbrc  :   0 
sbrs  :   2 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   5 std   :   2 sts   :   6 sub   :   0 subi  :   1 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 40 out of 116 (34.5%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00039c    790    134    924   16384   5.6%
[.dseg] 0x000060 0x0001b1      0     81     81    1024   7.9%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 14 warnings
